{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ren",
  "scopeName": "source.ren",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#entities" },
    { "include": "#constants-and-literals" },
    { "include": "#operators" },
    { "include": "#types" },
    { "include": "#support" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash.ren", "match": "//.*" }
      ]
    },
    "strings": {
      "name": "string.quoted.double.ren",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        { "name": "constant.character.escape.ren", "match": "\\\\." },
        { "include": "#string-interpolation" }
      ]
    },
    "string-interpolation": {
      "name": "meta.embedded.interpolation.ren",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": { "0": { "name": "punctuation.section.embedded.begin.ren" } },
      "endCaptures": { "0": { "name": "punctuation.section.embedded.end.ren" } },
      "patterns": [
        { "include": "$self" }
      ]
    },
    "keywords": {
      "patterns": [
        { "name": "keyword.control.ren", "match": "\\b(if|else|for|in|while|loop|break|return|import|panic)\\b" },
        { "name": "keyword.control.declaration.ren", "match": "\\b(let|decl|fn|type|enum|pub)\\b" },
        { "name": "keyword.operator.error-handling.ren", "match": "\\b(err)\\b" }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.assignment.ren", "match": "=" },
        { "name": "keyword.operator.heap-alloc.ren", "match": "\\+" },
        { "name": "keyword.operator.range.ren", "match": "\\.\\." },
        { "name": "keyword.operator.error-handling.ren", "match": "(\\?|!)" },
        { "name": "keyword.operator.pointer.ren", "match": "(&|\\*)" },
        { "name": "keyword.operator.logical.ren", "match": "\\b(and|or|not)\\b" },
        { "name": "keyword.operator.comparison.ren", "match": "==|!=|<=|>=|<|>" },
        { "name": "keyword.operator.arithmetic.ren", "match": "-|\\*|/" }
      ]
    },
    "constants-and-literals": {
      "patterns": [
        { "name": "constant.language.ren", "match": "\\b(true|false|none)\\b" },
        { "name": "constant.numeric.ren", "match": "\\b[0-9]+(\\.[0-9]+)?\\b" },
        { "name": "string.quoted.single.ren", "match": "'[^']'" }
      ]
    },
    "types": {
      "patterns": [
        { "name": "storage.type.primitive.ren", "match": "\\b(int|char|bool|any|void)\\b" },
        {
          "name": "storage.type.slice.ren",
          "begin": "<",
          "end": ">",
          "patterns": [ { "include": "$self" } ]
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.function.declaration.ren",
          "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.function.ren" },
            "2": { "name": "entity.name.function.ren" }
          }
        },
        {
          "name": "entity.name.type.declaration.ren",
          "match": "\\b(type|enum)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.ren" },
            "2": { "name": "entity.name.type.ren" }
          }
        },
        {
          "name": "variable.parameter.ren",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(:)",
          "captures": {
            "1": { "name": "variable.parameter.ren" },
            "2": { "name": "punctuation.separator.colon.ren" }
          }
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "name": "support.function.stdlib.ren",
          "match": "\\b(print|eprint|input|read|write|read_char|str|to_lowercase|to_uppercase|push|pop|split|join|find|contains|starts_with|ends_with|insert|get|remove|iter|rename|mkdir|rmdir|rm|exists|is_dir|list_dir|parse|assert|to_json|from_json|len|copy|sizeof|panic)\\b(?=\\()"
        },
        {
          "name": "entity.name.function.call.ren",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()"
        }
      ]
    }
  }
}